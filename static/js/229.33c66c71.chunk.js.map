{"version":3,"file":"static/js/229.33c66c71.chunk.js","mappings":"kPAuDA,GA5CaA,EAAAA,EAAAA,OAAK,SAACC,GACjB,IACIC,EADJ,EAAsDD,EAAME,KAArDC,EAAP,EAAOA,IAAKC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,YAAaC,EAA/B,EAA+BA,OAAQC,EAAvC,EAAuCA,YAGrCN,EADY,IAAXK,EACM,WACW,IAAXA,EACA,aAEA,UAGT,IAAME,GAAWC,EAAAA,EAAAA,MAEXC,EAASC,aAAaC,QAAQ,YAE9BC,GAAeC,EAAAA,EAAAA,cAAY,SAACC,EAAOC,GACvCR,EAASS,EAAAA,GAAmBF,EAAOC,EAAQN,MAC1C,CAACF,EAAUE,IAERQ,GAAeJ,EAAAA,EAAAA,cAAY,SAACE,GAChCR,EAASS,EAAAA,GAAmBD,EAAQN,MACnC,CAACF,EAAUE,IAEd,OAAQ,iCACE,iBAAKS,UAAS,sBAAiBlB,GAA/B,WACE,gBAAKkB,UAAU,cAAcC,QAAS,kBAAMF,EAAaf,IAAzD,UACE,SAACkB,EAAA,EAAD,OAEF,gBAAKF,UAAU,cAAf,wBACA,cAAGG,MAAO,CAACC,UAAW,OAAtB,SAA+BnB,KAC/B,gBAAKe,UAAU,cAAf,+BACA,cAAGG,MAAO,CAACC,UAAW,OAAtB,SAA+BlB,KAC/B,eAAGc,UAAU,aAAb,yBAAuC,IAAIK,KAAKjB,GAAakB,oBACjD,IAAXnB,IACC,iBAAKa,UAAU,WAAf,WACA,iBAAKA,UAAU,UAAUC,QAAS,kBAAMP,EAAa,EAAGV,IAAxD,WAA8D,SAACuB,EAAA,EAAD,IAA9D,eACA,iBAAKP,UAAU,SAASC,QAAS,kBAAMP,EAAa,EAAGV,IAAvD,WAA6D,SAACwB,EAAA,EAAD,IAA7D,uBAIJ,SAAC,KAAD,CAAgBC,UAAW,YCbvC,EA/BkB,WAEhB,IAAMpB,GAAWC,EAAAA,EAAAA,MACXC,EAASC,aAAaC,QAAQ,YAC9BiB,GAAYC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,KACvC,GAAqCC,EAAAA,EAAAA,UAASH,EAAUI,WAAxD,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACgB,SAArBP,EAAUvB,QAAoBE,EAASS,EAAAA,GAAiBP,MAC1D,CAACA,EAAQF,EAAUqB,EAAUvB,OAAQuB,EAAUQ,WAElDD,EAAAA,EAAAA,YAAU,WACLP,EAAUI,WAAWK,EAAWT,EAAUI,aAC5C,CAACJ,IAEJ,IAAMS,EAAa,SAAAC,GACjBJ,EAAaI,IAGTC,EACJN,EACIA,EAAaO,KAAI,SAAAvC,GAAI,OACnB,SAAC,EAAD,CAAMA,KAAMA,GAAWA,EAAKE,cAEhCsC,EAEJ,OAAO,gBAAKvB,UAAU,QAAf,SACJqB","sources":["components/TaskView/Task.js","views/Dashboard/ViewTasks.js"],"sourcesContent":["\r\n\r\nimport React, {useCallback, memo} from 'react';\r\nimport CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\r\nimport './task.scss';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as actions from '../../store/action';\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\nconst Task = memo((props) => {\r\n  const {_id, name, description, status, createddate} = props.task;\r\n  let flag;\r\n  if(status === 1){\r\n    flag = 'complete';\r\n  }else if(status === 2){\r\n    flag = 'incomplete';\r\n  }else {\r\n    flag = 'default';\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  //get username from localstorage\r\n  const userId = localStorage.getItem('username');\r\n\r\n  const handleUpdate = useCallback((value, taskId) => {\r\n    dispatch(actions.updateTask(value, taskId, userId))\r\n  }, [dispatch, userId]);\r\n\r\n  const handleDelete = useCallback((taskId) => {\r\n    dispatch(actions.deleteTask(taskId, userId))\r\n  }, [dispatch, userId])\r\n\r\n  return  <>\r\n            <div className={`card card-1 ${flag}`}>\r\n              <div className='delete-task' onClick={() => handleDelete(_id)}>\r\n                <DeleteOutlineOutlinedIcon/>\r\n              </div>\r\n              <div className=\"card__title\">Task Name</div>\r\n              <p style={{marginTop: '0px'}}>{name}</p>\r\n              <div className=\"card__title\">Task Description</div>\r\n              <p style={{marginTop: '0px'}}>{description}</p>\r\n              <p className=\"card__date\">Created at: {new Date(createddate).toLocaleString()}</p>\r\n              {status !== 1 && (\r\n                <div className='mark_sec'>\r\n                <div className='success' onClick={() => handleUpdate(1, _id)}><CheckCircleOutlineIcon />Complete</div>\r\n                <div className='danger' onClick={() => handleUpdate(2, _id)}><CancelIcon/>Incomplete</div>\r\n              </div>\r\n              )}\r\n            </div> \r\n            <ToastContainer autoClose={2000} /> \r\n  </>\r\n});\r\n\r\nexport default Task;\r\n","\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../store/action';\r\nimport Task from '../../components/TaskView/Task';\r\n\r\nconst ViewTasks = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const userId = localStorage.getItem('username');\r\n  const taskState = useSelector(state => state);\r\n  const [userTaskData, setUserTasks] = useState(taskState.userTasks)\r\n\r\n  useEffect(() => {\r\n    if(taskState.status === 'idle')  dispatch(actions.getTasks(userId)) \r\n  }, [userId, dispatch, taskState.status, taskState.isCount]);\r\n\r\n  useEffect(() => {\r\n    if(taskState.userTasks) handleData(taskState.userTasks)\r\n  }, [taskState])\r\n\r\n  const handleData = userTask => {\r\n    setUserTasks(userTask);\r\n  }\r\n\r\n  const allTasks = \r\n    userTaskData ? \r\n        userTaskData.map(task => (\r\n          <Task task={task} key={task.name} />\r\n        )) \r\n    : undefined;\r\n\r\n  return <div className=\"cards\">\r\n    {allTasks}\r\n  </div>;\r\n};\r\n\r\nexport default ViewTasks;\r\n"],"names":["memo","props","flag","task","_id","name","description","status","createddate","dispatch","useDispatch","userId","localStorage","getItem","handleUpdate","useCallback","value","taskId","actions","handleDelete","className","onClick","DeleteOutlineOutlined","style","marginTop","Date","toLocaleString","CheckCircleOutline","Cancel","autoClose","taskState","useSelector","state","useState","userTasks","userTaskData","setUserTasks","useEffect","isCount","handleData","userTask","allTasks","map","undefined"],"sourceRoot":""}